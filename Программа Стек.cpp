/*
<<ЗАДАЧА 1>>
Реализовать стек (динамический) из N - элементов.
*/

#include <stdio.h>
#include <stdlib.h>
#include <iostream>                    // поток ввода - вывода
#include <clocale>                     // подключение для рускоязычной консоли

using namespace std;

struct box                             // структура, в которой находятся "числа" для стека и их адреса
{
	int item;                          // значение ячейки
	box *next;                         // указатель на струкртуры типа коробка, которое переводит на следующую ячейку
};

struct stack                           // структура, в которой хранится указатель на структуры типа коробка
{
	box *top;					       // указатель на вершину (её адрес)
};

void steps(stack *S);                  // прототип для функции, обобщающей все действия ниже 
void push(stack *S);                   // прототип для функции "добавления" в стек
int pop(stack *S);                     // прототип для функции "удаления" из стека
void output(stack *S);				   // прототип для функции "вывода"

int main() 
{
	setlocale(LC_ALL, "Russian");      // функция для ввода русского языка
	stack Stack;                       // макет стека 
	Stack.top = NULL;				   // адрес вершины, равный NULL, т.к. её пока что нет
	steps(&Stack);
	system("pause");
    return 0;
}

void steps(stack *S)
{
	int n, m = 2;
	int value_stack = 0;               // значение вершины, взятое из стека 
	cout << "Введите количество элементов в стеке: ";
	cin >> n;
	cout << "Добавление элемента в стек: " << endl;
	for (int i = 0; i < n; i++)
	{
		push(S);
	}
	cout << "Вывод стека: " << endl;
	output(S);
	cout << "Удаление верхнего элемента (вершины) из стека " << m <<" раз(а):"<< endl;
	for (int i = 0; i < m; i++)
	{
		if (S->top == NULL)
		{
			cout << "Стек пуст!" << endl;
		}
		else
		{
			value_stack = pop(S);
		}
	}
	cout << "Вывод стека после удаления верхних элементов: " << endl;
	output(S);
}

void push(stack *S)                    // функция для добавления элемента в стек
{
	int value;                         // "число" для ввода в стек
	cin >> value;					   // ввод переменной
	box *value_pointer = new box;      // выделяется память 
	value_pointer->item = value;       // получение введенного числа
	value_pointer->next = S->top;      // текущая и предыдущая ячейки
	S->top = value_pointer;            // получение нового адреса для вершины 
}

int pop(stack *S)                      // функция для удаления ячейки из стека
{
	int temp = 0;                      // временная переменная для хранения старой вершины
	box *value_pointer;				   // указатель на структуру, которую удалим
	value_pointer = S->top;            // вершина - это адрес и мы приравнивает ее указателю
	temp = S->top->item;               // топ - адрес вершины, итем значение вершины и это значение хранится в темп
	S->top = value_pointer->next;      // "нижний элемент" станет вершиной
	delete value_pointer;              // освобождение памяти
	return temp;                       // возвращаем значение старой вершины
}

void output(stack *S)                  // функция для вывода стека
{
	box* pointer = S->top;             // взятие адреса вершины, чтобы вывести её, потом стек
	while (pointer != NULL)			   // последний элемент указывает на NULL или, если элементов нет, на NULL указывает сам стек
	{
		cout << pointer->item << endl; // выводим текущ. элемент стека
		pointer = pointer->next;	   // переходим к следующ. элементу стека
	}
}
